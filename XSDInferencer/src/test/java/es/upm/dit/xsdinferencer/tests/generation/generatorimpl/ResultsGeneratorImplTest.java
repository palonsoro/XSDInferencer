package es.upm.dit.xsdinferencer.tests.generation.generatorimpl;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertSame;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyMapOf;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.StringReader;
import java.util.Map;
import java.util.SortedSet;

import org.jdom2.Document;
import org.jdom2.input.SAXBuilder;
import org.junit.Before;
import org.junit.Test;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSortedSet;

import es.upm.dit.xsdinferencer.Results;
import es.upm.dit.xsdinferencer.XSDInferenceConfiguration;
import es.upm.dit.xsdinferencer.datastructures.Schema;
import es.upm.dit.xsdinferencer.exceptions.XSDConfigurationException;
import es.upm.dit.xsdinferencer.generation.ResultsGenerator;
import es.upm.dit.xsdinferencer.generation.StatisticResultsDocGenerator;
import es.upm.dit.xsdinferencer.generation.XSDDocumentGenerator;
import es.upm.dit.xsdinferencer.generation.generatorimpl.ResultsGeneratorImpl;
import es.upm.dit.xsdinferencer.generation.generatorimpl.statisticsgeneration.StatisticResultsDocGeneratorFactory;
import es.upm.dit.xsdinferencer.generation.generatorimpl.xsdgeneration.XSDDocumentGeneratorFactory;
import es.upm.dit.xsdinferencer.statistics.Statistics;
import es.upm.dit.xsdinferencer.util.xsdfilenaming.XSDFileNameGenerator;

/**
 * Unit test class for {@link ResultsGeneratorImpl}. Its main goal is to determine that all they submodules 
 * are called properly when they should and the results are correctly stored.
 * @author Pablo Alonso Rodriguez (Center for Open Middleware)
 */
public class ResultsGeneratorImplTest {
	/**
	 * Namespace URI for the namespace 'testing'
	 */
	private static final String NAMESPACE_URI_TESTING = "http://probando.net";
	
	/**
	 * Namespace URI for the namespace 'test'
	 */
	private static final String NAMESPACE_URI_TEST = "http://prueba.net";
	
	/**
	 * Mock XSD generator
	 */
	private XSDDocumentGenerator mockXSDDocumentGenerator;
	
	/**
	 * String with the contents of the resulting XSD for the namespace 'test'
	 */
	private String resultingXSDNSTestString;
	
	/**
	 * JDOM2 {@link Document} with the contents of the resulting XSD for the namespace 'test'
	 */
	private Document resultingXSDNSTest;
	
	/**
	 * String with the contents of the resulting XSD for the namespace 'testing'
	 */
	private String resultingXSDNSTestingString;
	
	/**
	 * JDOM2 {@link Document} with the contents of the resulting XSD for the namespace 'test'
	 */
	private Document resultingXSDNSTesting;
	
	/**
	 * Mock {@link XSDDocumentGeneratorFactory} so that the desired mock XSDs are generated by the tested implementation.
	 */
	private XSDDocumentGeneratorFactory mockXSDDocumentGeneratorFactory;
	
	/**
	 * Mock statistics generator
	 */
	private StatisticResultsDocGenerator mockStatisticResultsDocGenerator;
	
	/**
	 * String with the contents of the resulting statistics document
	 */
	private String resultingStatisticsDocString;
	
	/**
	 * JDOM2 {@link Document} with the contents of the resulting statistics document
	 */
	private Document resultingStatisticsDoc;
	
	/**
	 * Mock {@link StatisticResultsDocGeneratorFactory} so that the desired mock statistics document is generated
	 */
	private StatisticResultsDocGeneratorFactory mockStatisticResultsDocGeneratorFactory;
	
	/**
	 * Mock {@link XSDFileNameGenerator}
	 */
	private XSDFileNameGenerator mockXsdFileNameGenerator;
	
	/**
	 * An input schema. The only relevant information on it is the namespace-prefix mapping, in order to 
	 * check the known namespaces (the other information is not relevant because mocks are used).
	 */
	private Schema schema;
	
	/**
	 * The input statistics (their contents are not relevant because mocks are used)-
	 */
	private Statistics statistics;

	/**
	 * The inference configuration.
	 */
	private XSDInferenceConfiguration configuration;
	
	@Before
	public void setUp() throws Exception{
		schema = new Schema(2);
		Map<String, SortedSet<String>> namespacesToPossiblePrefixMapping = schema.getNamespacesToPossiblePrefixMappingModifiable();
		namespacesToPossiblePrefixMapping.put(NAMESPACE_URI_TEST, ImmutableSortedSet.of("test"));
		namespacesToPossiblePrefixMapping.put(NAMESPACE_URI_TESTING, ImmutableSortedSet.of("testing"));
		statistics = schema.getStatistics();
		
		String lineSeparator = System.getProperty("line.separator");
		resultingXSDNSTestingString = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"+ lineSeparator +
				"<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:test=\"http://prueba.net\" xmlns:testing=\"http://probando.net\" elementFormDefault=\"qualified\" />\r\n<!-- I am testing -->" + lineSeparator;
		resultingXSDNSTestString = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"+ lineSeparator +
				"<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:test=\"http://prueba.net\" xmlns:testing=\"http://prueba.net\" elementFormDefault=\"qualified\" />" + lineSeparator;
		resultingStatisticsDocString = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"+ lineSeparator +
				"<statistics xmlns=\"http://www.dit.upm.es/xsdinferencer/statistics\" />" + lineSeparator;
		SAXBuilder builder = new SAXBuilder();
		resultingXSDNSTesting = builder.build(new StringReader(resultingXSDNSTestingString));
		resultingXSDNSTest = builder.build(new StringReader(resultingXSDNSTestString));
		resultingStatisticsDoc = builder.build(new StringReader(resultingStatisticsDocString));
		
		configuration = mock(XSDInferenceConfiguration.class);
		when(configuration.getTypeNamesAncestorsSeparator()).thenReturn("-");
		when(configuration.getMergedTypesSeparator()).thenReturn("_and_");
		when(configuration.getGenerateEnumerations()).thenReturn(true);
		when(configuration.getMainNamespace()).thenReturn(NAMESPACE_URI_TEST);
		when(configuration.getSimpleTypeInferencer()).thenReturn(XSDInferenceConfiguration.VALUE_SIMPLE_TYPE_INFERENCER_DEFAULTIMPL);
		when(configuration.getAttributeListInferencer()).thenReturn(XSDInferenceConfiguration.VALUE_ATTRIBUTE_LIST_INFERENCER_DEFAULTIMPL);
		when(configuration.getMaxNumberOfDistinctValuesToEnum()).thenReturn(20);
		when(configuration.getMinNumberOfDistinctValuesToEnum()).thenReturn(3);
		
		mockXsdFileNameGenerator = mock(XSDFileNameGenerator.class);
		when(mockXsdFileNameGenerator.getSchemaDocumentFileName(eq(NAMESPACE_URI_TEST), anyMapOf(String.class, String.class)))
		.thenReturn("schema-ns_test.xsd");
		when(mockXsdFileNameGenerator.getSchemaDocumentFileName(eq(NAMESPACE_URI_TESTING), anyMapOf(String.class, String.class)))
		.thenReturn("schema-ns_testing.xsd");
		
		mockXSDDocumentGenerator = mock(XSDDocumentGenerator.class);
		when(mockXSDDocumentGenerator.generateSchemaDocument(eq(schema), eq(configuration), eq(NAMESPACE_URI_TEST), any(String.class), eq(mockXsdFileNameGenerator)))
		.thenReturn(resultingXSDNSTest);
		when(mockXSDDocumentGenerator.generateSchemaDocument(eq(schema), eq(configuration), eq(NAMESPACE_URI_TESTING), any(String.class), eq(mockXsdFileNameGenerator)))
		.thenReturn(resultingXSDNSTesting);
		
		mockXSDDocumentGeneratorFactory = mock(XSDDocumentGeneratorFactory.class);
		when(mockXSDDocumentGeneratorFactory.getXSDDocumentGeneratorInstance()).thenReturn(mockXSDDocumentGenerator);
		
		mockStatisticResultsDocGenerator = mock(StatisticResultsDocGenerator.class);
		when(mockStatisticResultsDocGenerator.generateStatisticResultsDoc(statistics)).thenReturn(resultingStatisticsDoc);
		
		mockStatisticResultsDocGeneratorFactory = mock(StatisticResultsDocGeneratorFactory.class);
		when(mockStatisticResultsDocGeneratorFactory.getStatisticResultsDocGeneratorInstance()).thenReturn(mockStatisticResultsDocGenerator);
		
		
	}
	
	/**
	 * Test method that checks that the correct resulting documents are placed correctly.
	 * @throws XSDConfigurationException if there is an error regarding the configuration
	 */
	@Test
	public void testNormal() throws XSDConfigurationException{
		ResultsGenerator resultsGenerator = new ResultsGeneratorImpl();
		Results results = resultsGenerator.generateResults(schema, configuration, mockXSDDocumentGeneratorFactory, mockStatisticResultsDocGeneratorFactory, mockXsdFileNameGenerator);
		
		Map<String, Document> schemas = results.getSchemasAsXML();
		assertEquals(2,schemas.size());
		assertSame(resultingXSDNSTest,schemas.get("schema-ns_test.xsd"));
		assertSame(resultingXSDNSTesting,schemas.get("schema-ns_testing.xsd"));
		
		Map<String, String> schemasAsXMLStrings = results.getSchemasAsXMLStrings();
		assertEquals(2,schemasAsXMLStrings.size());
		assertEquals(resultingXSDNSTestString,schemasAsXMLStrings.get("schema-ns_test.xsd"));
		assertEquals(resultingXSDNSTestingString,schemasAsXMLStrings.get("schema-ns_testing.xsd"));
		
		Map<String, Document> statisticsAsXML = results.getStatisticsAsXML();
		assertEquals(1,statisticsAsXML.size());
		assertEquals(resultingStatisticsDoc, statisticsAsXML.get("statistics.xml"));
		
		Map<String, String> statisticsAsXMLStrings = results.getStatisticsAsXMLStrings();
		assertEquals(1,statisticsAsXMLStrings.size());
		assertEquals(resultingStatisticsDocString, statisticsAsXMLStrings.get("statistics.xml"));
	}
	
	/**
	 * Test method that checks that the correct resulting documents are placed correctly if 
	 * there are skipped namespaces.
	 * @throws XSDConfigurationException if there is an error regarding the configuration
	 */
	@Test
	public void testSkippingNamespace() throws XSDConfigurationException{
		when(configuration.getSkipNamespaces()).thenReturn(ImmutableList.of(NAMESPACE_URI_TESTING));
		
		ResultsGenerator resultsGenerator = new ResultsGeneratorImpl();
		Results results = resultsGenerator.generateResults(schema, configuration, mockXSDDocumentGeneratorFactory, mockStatisticResultsDocGeneratorFactory, mockXsdFileNameGenerator);
		
		Map<String, Document> schemas = results.getSchemasAsXML();
		assertEquals(1,schemas.size());
		assertSame(resultingXSDNSTest,schemas.get("schema-ns_test.xsd"));
		assertFalse(schemas.containsKey("schema-ns_testing.xsd"));
		
		Map<String, String> schemasAsXMLStrings = results.getSchemasAsXMLStrings();
		assertEquals(1,schemasAsXMLStrings.size());
		assertEquals(resultingXSDNSTestString,schemasAsXMLStrings.get("schema-ns_test.xsd"));
		assertFalse(schemasAsXMLStrings.containsKey("schema-ns_testing.xsd"));
		
		Map<String, Document> statisticsAsXML = results.getStatisticsAsXML();
		assertEquals(1,statisticsAsXML.size());
		assertEquals(resultingStatisticsDoc, statisticsAsXML.get("statistics.xml"));
		
		Map<String, String> statisticsAsXMLStrings = results.getStatisticsAsXMLStrings();
		assertEquals(1,statisticsAsXMLStrings.size());
		assertEquals(resultingStatisticsDocString, statisticsAsXMLStrings.get("statistics.xml"));
	}
}
